{"ast":null,"code":"import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size; // verify the dimensions of the array\n\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      validate(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Create a new DenseMatrix\n   */\n\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while (isArray(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = resize(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n\n    var currentLength = m._size.reduce((length, size) => length * size);\n\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    }; // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n\n\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n\n    yield* recurse(this._data, []);\n  };\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n\n\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n\n    var data = this._data;\n\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n\n    return result;\n  };\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n\n\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n\n    var result = [];\n    var s = this.size();\n\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n\n    var data = this._data;\n\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n\n    return result;\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  }\n\n  return DenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["C:/Users/jhonc/Desktop/CALCULADORA/queueing-theory-calculator/node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js"],"names":["isArray","isBigNumber","isCollection","isIndex","isMatrix","isNumber","isString","typeOf","arraySize","getArrayDataType","processSizesWildcard","reshape","resize","unsqueeze","validate","validateIndex","format","isInteger","clone","deepStrictEqual","DimensionError","factory","maxArgumentCount","name","dependencies","createDenseMatrixClass","_ref","Matrix","DenseMatrix","data","datatype","SyntaxError","Error","type","_data","_size","_datatype","toArray","size","preprocess","TypeError","prototype","createDenseMatrix","Object","defineProperty","value","constructor","isDenseMatrix","getDataType","storage","create","subset","index","replacement","defaultValue","arguments","length","_get","_set","get","x","i","ii","indexI","set","map","_fit","matrix","isScalar","min","max","_getSubmatrix","dims","dim","last","range","dimension","valueOf","child","submatrix","iSize","sSize","outer","_setSubmatrix","forEach","dataIndex","subIndex","copy","sizeArray","Array","m","_resize","v","slice","currentLength","reduce","newSize","changed","push","callback","me","args","recurse","concat","undefined","Symbol","iterator","rows","result","s","row","columns","_this","_loop","col","options","toString","toJSON","mathjs","diagonal","k","toNumber","kSuper","kSub","n","Math","_value","ms","mul","d","fromJSON","json","swapRows","j","_swapRows","vi","elem","isClass"],"mappings":"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","sourcesContent":["import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}